package com.github.nikita.zhdanov.favorite.recipes.controller;

import com.github.nikita.zhdanov.favorite.recipes.error.RecipeNotExists;
import com.github.nikita.zhdanov.favorite.recipes.model.Recipe;
import com.github.nikita.zhdanov.favorite.recipes.service.RecipeService;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotBlank;

@RestController
@RequestMapping("recipe")
public class RecipeController {
    @Autowired
    private RecipeService recipeService;

    @PutMapping(value = "/{id}")
    @ApiOperation("Add new or update existing recipe.")
    @ApiResponses({
            @ApiResponse(code = 204, message = "Recipe saved."),
            @ApiResponse(code = 400, message = "Invalid request body provided."),
            @ApiResponse(code = 500, message = "Internal server error.")
    })
    public ResponseEntity<?> put(
            @ApiParam(
                    value = "For new recipes should be generated by caller (UUID recommended). Max - 36 symbols.",
                    example = "12345678-1234-1234-1234-1234567890ab"
            ) @PathVariable("id") String id,
            @Valid @RequestBody Recipe recipe
    ) {
        recipe.setId(id);
        recipeService.save(recipe);
        return ResponseEntity.status(204).build();
    }

    @DeleteMapping(value = "/{id}")
    @ApiOperation("Delete existing recipe by id.")
    @ApiResponses({
            @ApiResponse(code = 204, message = "Recipe removed."),
            @ApiResponse(code = 400, message = "Invalid request body provided."),
            @ApiResponse(code = 404, message = "Recipe not found."),
            @ApiResponse(code = 500, message = "Internal server error.")
    })
    public ResponseEntity<?> delete(
            @ApiParam(
                    value = "id of the recipe to remove.",
                    example = "12345678-1234-1234-1234-1234567890ab"
            ) @NotBlank @PathVariable("id") String id
    ) {
        try {
            recipeService.delete(id);
            return ResponseEntity.status(204).build();
        } catch (RecipeNotExists e) {
            return ResponseEntity.status(404).body(e.getMessage());
        }
    }

    @GetMapping(value = "/{id}")
    @ApiOperation("Get recipe by id.")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Recipe found.", response = Recipe.class),
            @ApiResponse(code = 400, message = "Invalid request."),
            @ApiResponse(code = 404, message = "Recipe not found."),
            @ApiResponse(code = 500, message = "Internal server error.")
    })
    public ResponseEntity<?> get(
            @ApiParam(
                    value = "id of the recipe to remove.",
                    example = "12345678-1234-1234-1234-1234567890ab"
            ) @NotBlank @PathVariable("id") String id
    ) {
        try {
            var recipe = recipeService.get(id);
            return ResponseEntity.ok(recipe);
        } catch (RecipeNotExists e) {
            return ResponseEntity.status(404).body(e.getMessage());
        }
    }
}
